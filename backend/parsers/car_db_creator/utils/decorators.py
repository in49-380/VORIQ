import json
import logging
from functools import wraps
from pathlib import Path

# üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ –ª–æ–≥-—Ñ–∞–π–ª—É
# Configures the path to the log file.
LOG_DIR = Path("data") / "files_log"
LOG_FILE = LOG_DIR / "parser.log"

# üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
# Creates a folder for logs if it doesn't already exist.
LOG_DIR.mkdir(parents=True, exist_ok=True)

# üõ†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
# Logger configuration
logging.basicConfig(
    filename=str(LOG_FILE),
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    encoding="utf-8"
)

logger = logging.getLogger("parser_logger")


# üì• –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ JSON
# Decorator for safe JSON loading.
def load_error_handler_json(func):
    """
    –û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ JSON, –¥–æ–±–∞–≤–ª—è—è –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫.

    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–∞–π–ª–∞, –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–π JSON, –¥—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.

    Args:
        func (Callable): –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON.

    Returns:
        Callable: –û–±—ë—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.

    Wraps a JSON loading function with error handling.

    Logs errors such as missing files, corrupted JSON, and other exceptions.

    Args:
        func (Callable): The JSON loading function to be wrapped.

    Returns:
        Callable: The wrapped function with error handling.
    """

    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except FileNotFoundError as e:
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return None
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON: {e}")
            return None
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON: {e}")
            return None

    return wrapper


# üì§ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON
# Decorator for safe JSON saving.
def save_error_handler_json(func):
    """
    –û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON, –¥–æ–±–∞–≤–ª—è—è –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫.

    –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.

    Args:
        func (Callable): –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON.

    Returns:
        Callable: –û–±—ë—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.

    Wraps a JSON saving function with error handling.

    Logs successful saves and any exceptions that may occur.

    Args:
        func (Callable): The JSON saving function to be wrapped.

    Returns:
        Callable: The wrapped function with error handling.
    """

    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            result = func(*args, **kwargs)
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            return result
        except IOError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞: {e}")
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ JSON: {e}")

    return wrapper
